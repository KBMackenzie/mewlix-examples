yarn ball controls

from std.graphic takes spritesheet, Rectangle
from ui.button takes Button
from ui.text takes TextBox
takes std.graphic
takes palette

~( ^.x.^)>
The speed controls will consist of:
  - A 'plus' button for increasing speed.
  - A 'minus' button for decreasing speed.
  - A text box to display the current speed.

To start off, let's define constants for our sprites:
<(^.x.^ )~
mew sprite_width!!!  = 16
mew sprite_height!!! = 16

mew plus!!! = =^-x-^= [
  normal:  "plus-sprite",
  hovered: "plus-sprite-hovered",
]

mew minus!! = =^-x-^= [
  normal:  "minus-sprite",
  hovered: "minus-sprite-hovered",
]

~( ^.x.^)> And let us load our sprites: <(^.x.^ )~
spritesheet("assets/plus-minus.png", [
  =^-x-^= [ key: plus.normal,    rect: new Rectangle( 0,  0,  16, 16) ],
  =^-x-^= [ key: plus.hovered,   rect: new Rectangle(16,  0,  16, 16) ],
  =^-x-^= [ key: minus.normal,   rect: new Rectangle( 0, 16,  16, 16) ],
  =^-x-^= [ key: minus.hovered,  rect: new Rectangle(16, 16,  16, 16) ],
])

~( ^.x.^)>
After that, we can begin working on our controls' state.

We will store our speed in percentages:
  100% is the normal speed.
  50% is half as fast.
  200% is twice as fast.

We don't want our speed to ever go below 1%.

Let's define a variable to hold our speed value, and a 'setter' function for safely setting our speed value:
<(^.x.^ )~
mew speed = 100

=^.x.^= change_speed(value)
  speed = std.max(20, speed + value)
~meow

~( ^.x.^)>
After that, we can begin constructing our controls.

We will use some UI utility clowders here.
The 'takes' statements at the top should tell you where they came from!

Let's define a box to hold the two buttons and the text box:
<(^.x.^ )~
mew controls!!! = =^-x-^= [
  plus: new Button(
    new Rectangle(0, 0, sprite_width, sprite_height),
    =^oxo^= () -> change_speed(20),
  ),
  minus: new Button(
    new Rectangle(0, 0, sprite_width, sprite_height),
    =^oxo^= () -> change_speed(-20),
  ),
  display: new TextBox(
    new Rectangle(0, 0, 48, sprite_width),
    std.purr(speed),
    =^-x-^= [ size: 16, color: palette.light_pink ]
  ),
]

~( ^.x.^)> And now, let's define a couple functions to operate on them! <(^.x.^ )~

=^.x.^= get_width()
  bring controls.plus.rect.width  \
    + controls.display.rect.width \
    + controls.minus.rect.width
~meow

=^.x.^= get_height()
  bring sprite_height
~meow

=^.x.^= set_position(x, y)
  controls.minus.rect.x = x
  controls.minus.rect.y = y
  x = x + controls.minus.rect.width   -- Move forward.

  controls.display.rect.x = x
  controls.display.rect.y = y
  x = x + controls.display.rect.width -- Move forward.

  controls.plus.rect.x = x
  controls.plus.rect.y = y
~meow

=^.x.^= draw()
  mew plus_sprite  = plus.hovered if controls.plus.is_hovered() else plus.normal
  mew minus_sprite = minus.hovered if controls.minus.is_hovered() else minus.normal

  do graphic.draw <- plus_sprite, controls.plus.rect.x, controls.plus.rect.y
  do graphic.draw <- minus_sprite, controls.minus.rect.x, controls.minus.rect.y
  controls.display.draw()
~meow

=^.x.^= update()
  controls.plus.update()
  controls.minus.update()
  do controls.display.set_message <- :3"[speed]%"
~meow
