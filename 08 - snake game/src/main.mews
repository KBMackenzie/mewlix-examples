yarn ball main

-- Before anything, let's import the core graphic functions + types:
takes std.graphic
from std.graphic takes Rectangle, Vector2, Color, key_pressed, key_down, keys

-- And after that...
from sprites takes snake_head, heart -- ... Our sprites!
takes palette                        -- ... Our color palette!
takes utils.canvas                   -- ... Canvas size constants.
takes utils.position                 -- ... Canvas positioning utilities.
from utils.fps takes FpsCounter      -- ... A FPS counter for later.

-- The map for our game will be made up of 8 x 8 pixel squares.
-- We can define a few useful constants based on this:
mew square_side!!! = 8
mew rows!!!    = canvas.height // square_side
mew columns!!! = canvas.width  // square_side

-- A cat tree representing all possible directions the snake is able to move in.
cat tree Direction
  Up
  Down
  Left
  Right
~meow

-- Vector2 constants defining movement based on direction.
-- The keys in this box should match the Direction cat tree's constants:
mew movement! = =^-x-^= [
  Up:    (new Vector2 <-  0, -8),
  Down:  (new Vector2 <-  0,  8),
  Left:  (new Vector2 <- -8,  0),
  Right: (new Vector2 <-  8,  0),
]

-----------------------------------------
-- Logic:
-----------------------------------------

~( ^.x.^)> 
And now, we can begin defining a few pure functions that will help us with our game's logic.
No I/O, no side effects. Pure utility functions only for now.

We can begin with an utility function for 'moving' a Rectangle, which always generates a new Rectangle, avoiding any side effects.
When our snake goes off screen, we want it to come out on the other side. For that, we'll use the modulo (%) operator.
<(^.x.^ )~
=^.x.^= move_rect(rect, move)
  bring new Rectangle(
    (rect.x + move.x) % canvas.width,
    (rect.y + move.y) % canvas.height,
    rect.width,
    rect.height,
  )
~meow

~( ^.x.^)> 
Choose a random square in our map. This will be used for:
  - Generating food.
  - Choosing the starting position for the snake.

We don't want to change any squares touching the corners.
Thus, we follow these rules for choosing (x, y) positions:
  0 < x < columns - 1
  0 < y < rows - 1
<(^.x.^ )~
=^.x.^= random_position()
  bring new Rectangle(
    std.random_int(1, columns - 2) * square_side,
    std.random_int(1, rows - 2) * square_side,
    square_side,
    square_side,
  )
~meow

~( ^.x.^)> 
We will represent our snake as a shelf of boxes.
We will represent our food as a Rectangle box.

Based on that, we can define:
  1. A function for constructing a new box for the snake body.
  2. A pure function for 'growing' our snake.
  3. Pure functions for checking the snake's collision with food and with itself.
<(^.x.^ )~
=^.x.^= snake_part(rect, direction)
  bring =^-x-^= [
    rect: rect,
    direction: direction,
  ]
~meow

=^.x.^= grow_snake(snake, new_head, got_food)
  mew body! = snake if got_food else (do std.remove <- snake, -1)
  bring new_head push body
~meow

=^.x.^= is_game_over(snake)
  mew head! = paw at snake
  mew is_colliding! = =^oxo^= (x) -> do head.rect.collides <- x.rect
  bring do std.any <- is_colliding, knock over snake
~meow

=^.x.^= has_gotten_food(snake, food)
  bring (paw at snake).rect.collides(food)
~meow

-----------------------------------------
-- Movement
-----------------------------------------

~( ^.x.^)> 
Now, we can begin thinking about direction and movement.

For convenience, let's define a function for choosing a good starting direction for our snake.
The snake should always face away from the nearest corner at the start:
<(^.x.^ )~
=^.x.^= start_direction(pos)
  bring Direction.Up if pos.y > (canvas.width / 2) else Direction.Down
~meow

~( ^.x.^)> 
It's time to slowly move into the world of I/O.
A procedure for listening to keyboard input and changing direction based on the keys pressed.

Note: We're choosing not to allow *backwards movement*, because it's certainly never what the player intended.
<(^.x.^ )~
=^.x.^= get_direction(current)
  look if key_down(keys.up)    and current != Direction.Down;  bring Direction.Up;    ~meow
  look if key_down(keys.down)  and current != Direction.Up;    bring Direction.Down;  ~meow
  look if key_down(keys.left)  and current != Direction.Right; bring Direction.Left;  ~meow
  look if key_down(keys.right) and current != Direction.Left;  bring Direction.Right; ~meow
  bring current
~meow

-----------------------------------------
-- Drawing
-----------------------------------------

-- We're now truly out of the world of pure functions. It's time to draw!
-- Let us begin defining how to draw our snake, food, and text.

=^.x.^= draw_snake(snake)
  mew head = paw at snake
  mew body = knock over snake
  mew last_direction = head.direction

  chase after part in body!!!
    do graphic.rect <- part.rect, palette.magenta
  ~meow

  -- We draw the head last to make sure it'll always be drawn 'over' the body:
  do graphic.draw <- snake_head[head.direction.key], head.rect.x, head.rect.y
~meow

=^.x.^= draw_food(food)
    do graphic.draw <- heart, food.x, food.y
~meow

-- Draw text centered horizontally on the screen.
=^.x.^= draw_text(message, row, opts)
  mew size = graphic.measure_text(message, opts)
  mew x = (canvas.width - size.width) / 2
  mew y = position.row(row)
  graphic.write(message, x, y, opts)
~meow

-----------------------------------------
-- Game Loop 
-----------------------------------------

-- We can now start thinking about mutable game state.
-- All our mutable game state and our 'scene' structure will live below.
=^.x.^= new_state()
  mew snake_rect = random_position()
  mew snake_direction = do start_direction <- snake_rect

  bring =^-x-^= [
    -- Our snake body, food position, and snake direction state:
    snake: [do snake_part <- snake_rect, snake_direction],
    food: random_position(),
    direction: snake_direction,

    -- We also need to keep track of how fast the snake should move.
    -- Four squares per second is a good movement speed.
    timer: 0.0,
    wait: 1 / 4,
  ]
~meow

mew state = new_state()

-- With this, we can begin defining procedures for each 'scene' in our game:
-- The code below is self-documenting, so comments will be more sparse.
mew scene_table! = =^-x-^= []
mew current_scene = "snake_game"

-- The "snake_game" scene, our core gameplay loop.
-- We draw and listen to input inside of it.
=^.x.^= [scene_table["snake_game"]]()
  do graphic.paint <- palette.pastel
  do draw_food  <- state.food
  do draw_snake <- state.snake

  state.direction = do get_direction <- state.direction
  state.timer = state.timer + graphic.delta()

  look if state.timer > state.wait
    state.timer = 0
    mew got_food! = do has_gotten_food <- state.snake, state.food

    look if got_food
      state.food = random_position()
    ~meow

    mew movement_vector = movement[state.direction.key]
    mew head_rect! = do move_rect <- (paw at state.snake).rect, movement_vector
    mew new_head!  = do snake_part <- head_rect, state.direction

    state.snake = do grow_snake <- state.snake, new_head, got_food

    look if is_game_over(state.snake)
      current_scene = "game_over"
    ~meow
  ~meow
~meow

-- The "game_over" scene, our game over screen.
-- A player can press [Space] to restart the game.
=^.x.^= [scene_table["game_over"]]()
  do graphic.paint <- palette.pastel
  do draw_food  <- state.food
  do draw_snake <- state.snake
  do graphic.paint <- new Color <- 255, 0, 128, 20

  do draw_text <- "You bit your tail!", 3, =^-x-^= [
    size: 16,
    color: palette.light,
  ]
  do draw_text <- "Press [Space] to restart!", 4, =^-x-^= [
    size: 8,
    color: palette.light,
  ]

  look if key_pressed(keys.space)
    state = new_state()
    current_scene = "snake_game"
  ~meow
~meow

-- And finally, we can define our main game loop and start the game!
-- We will also add a FPS counter for our own convenience.
mew fps! = new FpsCounter()
mew fps_opts! = =^-x-^= [ color: palette.rouge ]

=^.x.^= game_loop()
  scene_table[current_scene]()
  fps.tick()
  fps.draw(1, 0, fps_opts)
~meow

do graphic.init <- game_loop
